name: Deploy to AWS Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Allow only one concurrent deployment
concurrency:
  group: "aws-deployment"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    # Build Frontend
    - name: Install frontend dependencies
      run: npm ci

    - name: Create production environment file
      run: |
        cp .env.production .env.production.tmp
        sed -i "s/AWS_SERVER_IP/${{ secrets.AWS_SERVER_IP }}/g" .env.production.tmp
        mv .env.production.tmp .env.production

    - name: Build frontend
      run: |
        cp .env.production .env.local
        npm run build

    # Prepare SSH
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.AWS_PEM_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
        chmod 400 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.AWS_SERVER_IP }} >> ~/.ssh/known_hosts
        
        # Test SSH connection with proper user
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ secrets.AWS_SERVER_IP }} "whoami && echo 'SSH connection successful'"

    # Deploy to AWS Server
    - name: Deploy to AWS Server
      run: |
        # Create deployment directory structure on server
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ secrets.AWS_SERVER_IP }} "
          sudo mkdir -p /var/www/restaurant-pos
          sudo chown -R ubuntu:ubuntu /var/www/restaurant-pos
          mkdir -p /var/www/restaurant-pos/frontend
          mkdir -p /var/www/restaurant-pos/backend
        "

        # Upload frontend build
        scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -r dist/* ubuntu@${{ secrets.AWS_SERVER_IP }}:/var/www/restaurant-pos/frontend/

        # Upload backend files
        scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -r backend/* ubuntu@${{ secrets.AWS_SERVER_IP }}:/var/www/restaurant-pos/backend/

        # Upload environment files
        scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no .env.production ubuntu@${{ secrets.AWS_SERVER_IP }}:/var/www/restaurant-pos/backend/.env

        # Upload docker files
        scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no docker-compose.yml ubuntu@${{ secrets.AWS_SERVER_IP }}:/var/www/restaurant-pos/
        scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no docker-compose.dev.yml ubuntu@${{ secrets.AWS_SERVER_IP }}:/var/www/restaurant-pos/
        scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no nginx.conf ubuntu@${{ secrets.AWS_SERVER_IP }}:/var/www/restaurant-pos/

    # Install dependencies and restart services
    - name: Install dependencies and restart services
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ secrets.AWS_SERVER_IP }} "
          set -e  # Exit on any error
          
          echo 'Starting server setup...'
          
          # Update package list
          sudo apt-get update
          
          # Install Node.js if not present
          if ! command -v node &> /dev/null; then
            echo 'Installing Node.js...'
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
          else
            echo 'Node.js already installed: '$(node --version)
          fi
          
          # Install Docker if not present
          if ! command -v docker &> /dev/null; then
            echo 'Installing Docker...'
            sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
            sudo usermod -aG docker ubuntu
            
            # Start and enable Docker
            sudo systemctl start docker
            sudo systemctl enable docker
          else
            echo 'Docker already installed: '$(docker --version)
          fi
          
          # Install Docker Compose if not present
          if ! command -v docker-compose &> /dev/null; then
            echo 'Installing Docker Compose...'
            sudo curl -L \"https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          else
            echo 'Docker Compose already installed: '$(docker-compose --version)
          fi
          
          # Navigate to backend directory and install dependencies
          cd /var/www/restaurant-pos/backend
          echo 'Installing backend dependencies...'
          npm install --production
          
          # Navigate to project root
          cd /var/www/restaurant-pos
          
          # Stop existing containers
          echo 'Stopping existing containers...'
          sudo docker-compose down 2>/dev/null || echo 'No existing containers to stop'
          
          # Build and start services with Docker Compose
          echo 'Starting services with Docker Compose...'
          sudo docker-compose up -d --build
          
          # Wait for services to start
          echo 'Waiting for services to start...'
          sleep 10
          
          # Check if containers are running
          sudo docker-compose ps
          
          # Install and configure Nginx
          if ! command -v nginx &> /dev/null; then
            echo 'Installing Nginx...'
            sudo apt-get install -y nginx
          fi
          
          # Setup Nginx configuration
          echo 'Configuring Nginx...'
          sudo cp nginx.conf /etc/nginx/sites-available/restaurant-pos
          sudo ln -sf /etc/nginx/sites-available/restaurant-pos /etc/nginx/sites-enabled/
          sudo rm -f /etc/nginx/sites-enabled/default
          
          # Test nginx configuration
          sudo nginx -t
          
          # Restart and enable Nginx
          sudo systemctl restart nginx
          sudo systemctl enable nginx
          
          # Check Nginx status
          sudo systemctl status nginx --no-pager
          
          echo 'Deployment completed successfully!'
        "

    # Health Check
    - name: Health Check
      run: |
        sleep 30
        response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.AWS_SERVER_IP }})
        if [ $response -eq 200 ]; then
          echo "Deployment successful! Application is running."
        else
          echo "Deployment may have issues. HTTP status: $response"
          exit 1
        fi

    # Cleanup
    - name: Cleanup SSH
      if: always()
      run: |
        rm -f ~/.ssh/id_rsa
